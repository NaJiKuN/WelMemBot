import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler
import random
import string
import sqlite3
from datetime import datetime, timedelta

# Bot configuration
BOT_TOKEN = "8034775321:AAHVwntCuBOwDh3NKIPxcs-jGJ9mGq4o0_0"
ADMIN_IDS = [764559466]
INVITE_LINK = "https://t.me/+BgsrjW-Y8qtkOTY0"
WELCOME_MESSAGE = """
أهلاً وسهلاً بك، {username}!
سيتم إنهاء عضويتك بعد 12 شهرًا تلقائيًا.
يُرجى الالتزام بآداب المجموعة وتجنب المغادرة قبل المدة المحددة، لتجنب إيقاف العضوية.
"""
DB_FILE = "/home/ec2-user/projects/WelMemBot/invite_codes.db"

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='/home/ec2-user/projects/WelMemBot/bot.log'
)
logger = logging.getLogger(__name__)

# Database initialization
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # Fixed SQL syntax here
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS invite_codes (
            code TEXT PRIMARY KEY,
            used INTEGER DEFAULT 0,
            used_by INTEGER,
            used_at TEXT,
            expires_at TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS group_settings (
            id INTEGER PRIMARY KEY,
            group_id INTEGER,
            group_title TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_memberships (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            joined_at TEXT,
            expires_at TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# Database helper functions
def save_code(code):
    expires_at = (datetime.now() + timedelta(days=365)).strftime('%Y-%m-%d %H:%M:%S')
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO invite_codes (code, expires_at) VALUES (?, ?)",
        (code, expires_at)
    )
    conn.commit()
    conn.close()

def mark_code_used(code, user_id, username, first_name, last_name):
    joined_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    expires_at = (datetime.now() + timedelta(days=365)).strftime('%Y-%m-%d %H:%M:%S')
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # Fixed SQL syntax here
    cursor.execute(
        "UPDATE invite_codes SET used = 1, used_by = ?, used_at = ? WHERE code = ?",
        (user_id, joined_at, code)
    )
    
    cursor.execute(
        """INSERT OR REPLACE INTO user_memberships 
        (user_id, username, first_name, last_name, joined_at, expires_at) 
        VALUES (?, ?, ?, ?, ?, ?)""",
        (user_id, username, first_name, last_name, joined_at, expires_at)
    )
    
    conn.commit()
    conn.close()

def is_code_valid(code):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT used, expires_at FROM invite_codes WHERE code = ?",
        (code,)
    )
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        return False
    
    used, expires_at = result
    if used == 1:
        return False
    
    if expires_at and datetime.strptime(expires_at, '%Y-%m-%d %H:%M:%S') < datetime.now():
        return False
    
    return True

# ... [rest of the code remains the same as in the previous version]

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # Command handlers
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin_command))
    
    # Message handlers
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command & ~Filters.chat_type.groups,
        handle_invite_code
    ))
    
    # Admin handlers
    dp.add_handler(MessageHandler(
        Filters.regex(r'^\d+$') & Filters.chat(chat_id=ADMIN_IDS) & ~Filters.command,
        handle_code_generation
    ))
    
    dp.add_handler(MessageHandler(
        Filters.forwarded & Filters.chat(chat_id=ADMIN_IDS),
        handle_group_setting
    ))
    
    # Callback handlers
    dp.add_handler(CallbackQueryHandler(generate_codes_callback, pattern='generate_codes'))
    dp.add_handler(CallbackQueryHandler(set_group_callback, pattern='set_group'))
    dp.add_handler(CallbackQueryHandler(show_stats_callback, pattern='show_stats'))
    
    # Error handler
    dp.add_error_handler(error_handler)

    updater.start_polling()
    logger.info("Bot is running...")
    updater.idle()

if __name__ == '__main__':
    main()
